* More Functional Patterns - Chapter 07
:PROPERTIES:
:CUSTOM_ID: more-functional-patterns---chapter-07
:END:
- [[#exercises:-grab-bag][Exercises: Grab bag]]
  - [[#01-mth][01 mTh]]
  - [[#02-mth-type][02 mTh type]]
  - [[#03][03]]
    - [[#a][a]]
    - [[#b][b]]
    - [[#c][c]]
- [[#exercise:-variety-pack][Exercise: Variety Pack]]
  - [[#01][01]]
  - [[#02][02]]
- [[#exercises:-case-practice][Exercises: Case practice]]
  - [[#01][01]]
  - [[#02][02]]
  - [[#03][03]]
- [[#exercises:-artful-dodgy][Exercises: Artful dodgy]]
- [[#exercises:-guard-duty][Exercises: Guard duty]]
  - [[#01][01]]
  - [[#02][02]]
  - [[#03][03]]
  - [[#04][04]]
  - [[#05][05]]
  - [[#06][06]]
  - [[#07][07]]
    - [[#08][08]]
- [[#chapter-exercises][Chapter exercises]]
  - [[#multiple-choice][Multiple Choice]]
    - [[#01][01]]
    - [[#02][02]]
    - [[#03][03]]
    - [[#04][04]]
    - [[#05][05]]
  - [[#let’s-write-code][Let's write code]]
    - [[#01][01]]
      - [[#a][a]]
      - [[#b][b]]
      - [[#c][c]]
    - [[#02][02]]
    - [[#03][03]]
    - [[#04,-05][04, 05]]
    - [[#06][06]]

** Exercises: Grab bag
:PROPERTIES:
:CUSTOM_ID: exercises-grab-bag
:END:
*** 01 mTh
:PROPERTIES:
:CUSTOM_ID: mth
:END:
All the four versions are equivalent.

*** 02 mTh type
:PROPERTIES:
:CUSTOM_ID: mth-type
:END:
Letter D is correct. Nothing is forcing the compiler to give a concrete
type to the parameters. =Num a= is still the most polymorphic possible.

*** 03
:PROPERTIES:
:CUSTOM_ID: section
:END:
**** a
:PROPERTIES:
:CUSTOM_ID: a
:END:
#+begin_src haskell
-- ‘odd’ handles ‘Integral’, not ‘Num’.
add1IfOdd :: Integral a => a -> a
add1IfOdd n =
  case odd n of
    True -> f n
    False -> n
    where f = \x -> x + 1
#+end_src

**** b
:PROPERTIES:
:CUSTOM_ID: b
:END:
#+begin_src haskell
add5 :: (Num a, Ord a) => a -> a -> a
add5 = \x -> \y -> (+) 5 (if x > y then y else x)
#+end_src

**** c
:PROPERTIES:
:CUSTOM_ID: c
:END:
#+begin_src haskell
mflip :: (Num a, Num b, Num c) => (a -> b -> c) -> b -> a -> c
mflip f x y = f y x
#+end_src

** Exercise: Variety Pack
:PROPERTIES:
:CUSTOM_ID: exercise-variety-pack
:END:
Page 237.

*** 01
:PROPERTIES:
:CUSTOM_ID: section-1
:END:
1. =k :: (a, b) -> a=

2. =k2 :: [Char]=

3. =k1= and =k3= will.

*** 02
:PROPERTIES:
:CUSTOM_ID: section-2
:END:
#+begin_src haskell
f :: (a, b, c) -> (d, e, f) -> ((a, d), (c, f))
f (a, _, c) (d, _, f) = ((a, d), (c, f))
#+end_src

** Exercises: Case practice
:PROPERTIES:
:CUSTOM_ID: exercises-case-practice
:END:
Page 240.

*** 01
:PROPERTIES:
:CUSTOM_ID: section-3
:END:
#+begin_src haskell
fnC :: Ord a => a -> a -> a
fnC x y =
  case x > y of
    True -> x
    False -> y
#+end_src

*** 02
:PROPERTIES:
:CUSTOM_ID: section-4
:END:
#+begin_src haskell
ifEvenAdd2 :: Integral a => a -> a
ifEvenAdd2 n =
  case even n of
    True -> (+) n 2
    False -> n
#+end_src

*** 03
:PROPERTIES:
:CUSTOM_ID: section-5
:END:
#+begin_src haskell
import GHC.Int

nums :: (Ord a, Num a) => a -> Int8
nums x =
  case compare x 0 of
    LT -> -1
    GT -> 1
    EQ -> 0
#+end_src

** Parenthesization and Associativity of (->)
:PROPERTIES:
:CUSTOM_ID: parenthesization-and-associativity-of--
:END:
#+begin_example
returnLast :: a -> b -> c -> d -> d
returnLast _ _ _ d = d
#+end_example

Parenthesizing the type signature:

#+begin_example
returnLast' :: a -> (b -> (c -> (d -> d)))
returnLast' _ _ _ d = d
#+end_example

It takes =a= and returns a function which takes some =b= and returns a
function that takes =c= which in turn returns a function that takes =d=
and finally returns =d=.

The error "The equation(s) for fn have n arguments but its type /some
type/ has only one" means the function actual parameters like
=f x y z = ...= but the type signature implies only one parameter is
taken.

#+begin_example
f :: (((a -> b) -> c) -> d) -> d
f x y w z = z

λ> :load ch07-functional-patterns/HOFs.hs
[1 of 1] Compiling Main ( ch07-functional-patterns/HOFs.hs, interpreted )

ch07-functional-patterns/HOFs.hs:16:1: error:
    • Couldn't match expected type ‘d’
                  with actual type ‘p0 -> p1 -> p2 -> p2’
      ‘d’ is a rigid type variable bound by
        the type signature for:
          f :: forall a b c d. (((a -> b) -> c) -> d) -> d
        at ch07-functional-patterns/HOFs.hs:15:1-32
    • The equation(s) for ‘f’ have four arguments,
      but its type ‘(((a -> b) -> c) -> d) -> d’ has only one
    • Relevant bindings include
        f :: (((a -> b) -> c) -> d) -> d
          (bound at ch07-functional-patterns/HOFs.hs:16:1)
   |
16 | f x y w z = z
   | ^^^^^^^^^^^^^
Failed, no modules loaded.
#+end_example

** Exercises: Artful dodgy
:PROPERTIES:
:CUSTOM_ID: exercises-artful-dodgy
:END:
Page 248.

#+begin_src ghci
λ> dodgy 1 0
1

λ> dodgy 1 1
11

λ> dodgy 2 2
22

λ> dodgy 1 2
21

λ> dodgy 2 1
12

λ> oneIsOne 1
11

λ> oneIsOne 2
21

λ> oneIsTwo 1
21

λ> oneIsTwo 2
22

λ> oneIsOne 3
31

λ> oneIsTwo 3
2
#+end_src

** Exercises: Guard duty
:PROPERTIES:
:CUSTOM_ID: exercises-guard-duty
:END:
*** 01
:PROPERTIES:
:CUSTOM_ID: section-6
:END:
All inputs would produce 'A'.

*** 02
:PROPERTIES:
:CUSTOM_ID: section-7
:END:
No, it would make a mess. The comparisons are relying on the order of
the values and it returns on the first that matches.

*** 03
:PROPERTIES:
:CUSTOM_ID: section-8
:END:
B is correct.

*** 04
:PROPERTIES:
:CUSTOM_ID: section-9
:END:
Something that can be ordered and compared for equality, =Ord= implies
=Eq=.

*** 05
:PROPERTIES:
:CUSTOM_ID: section-10
:END:
#+begin_src haskell
pal :: Ord a => [a] -> Bool
#+end_src

*** 06
:PROPERTIES:
:CUSTOM_ID: section-11
:END:
C is correct.

*** 07
:PROPERTIES:
:CUSTOM_ID: section-12
:END:
Any type of numbers that can be compared.

**** 08
:PROPERTIES:
:CUSTOM_ID: section-13
:END:
#+begin_src haskell
numbers :: (Ord a, Num a, Num p) => a -> p
#+end_src

** Chapter exercises
:PROPERTIES:
:CUSTOM_ID: chapter-exercises
:END:
Page 264.

*** Multiple Choice
:PROPERTIES:
:CUSTOM_ID: multiple-choice
:END:
**** 01
:PROPERTIES:
:CUSTOM_ID: section-14
:END:
D is correct.

**** 02
:PROPERTIES:
:CUSTOM_ID: section-15
:END:
B is correct.

#+begin_src haskell
f :: Char -> String
f c = [c]

g :: String -> [String]
g s = [s]

h :: Char -> [String]
h = g . f

-- λ> h 'k'
-- ["k"]
#+end_src

**** 03
:PROPERTIES:
:CUSTOM_ID: section-16
:END:
D is correct.

#+begin_src haskell
f :: Ord a => a -> a -> Bool
f x y = (>) x y

-- Partially-apply ‘f’.
g :: (Ord a, Num a) => a -> Bool
g = f 1
#+end_src

**** 04
:PROPERTIES:
:CUSTOM_ID: section-17
:END:
B is correct.

**** 05
:PROPERTIES:
:CUSTOM_ID: section-18
:END:
A is correct.

*** Let's write code
:PROPERTIES:
:CUSTOM_ID: lets-write-code
:END:
**** 01
:PROPERTIES:
:CUSTOM_ID: section-19
:END:
***** a
:PROPERTIES:
:CUSTOM_ID: a-1
:END:
#+begin_src haskell
tensDigit :: Integral a => a -> a
tens x = d
  where
    xLast = fst . divMod x $ 10
    d     = snd . divMod xLast $ 10
#+end_src

***** b
:PROPERTIES:
:CUSTOM_ID: b-1
:END:
Yes, the same type signature.

***** c
:PROPERTIES:
:CUSTOM_ID: c-1
:END:
#+begin_src haskell
hunsD :: Integral a => a -> a
hunsD x = d
  where
    xLast = fst . divMod x $ 100
    d     = snd . divMod xLast $ 10
#+end_src

**** 02
:PROPERTIES:
:CUSTOM_ID: section-20
:END:
#+begin_src haskell
foldBool :: a -> a -> Bool -> a
foldBool x _ False = x
foldBool _ y True  = y

fb :: a -> a -> Bool -> a
fb x y b =
  case b of
    False -> x
    True  -> y
#+end_src

**** 03
:PROPERTIES:
:CUSTOM_ID: section-21
:END:
#+begin_src haskell
g :: (a -> b) -> (a, c) -> (b, c)
g aToB (a, c) = (aToB a, c)
#+end_src

**** 04, 05
:PROPERTIES:
:CUSTOM_ID: section-22
:END:
#+begin_src haskell
roundTrip :: (Show a, Read a) => a -> a
roundTrip a = read (show a)

-- The point-free version
rt :: (Show a, Read a) => a -> a
rt = read . show

main :: IO ()
main = do
  print $ roundTrip 4
  print $ id 4

  print $ rt 4
#+end_src

**** 06
:PROPERTIES:
:CUSTOM_ID: section-23
:END:
#+begin_src haskell
roundTrip :: (Show a, Read b) => a -> b
roundTrip = read . show

main :: IO ()
main = do
  print (roundTrip 1 :: Word)
  print (id 1)
#+end_src
