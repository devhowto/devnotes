* Strings - Chapter 3
:PROPERTIES:
:CUSTOM_ID: strings---chapter-3
:END:

#+begin_html
  <!-- vim-markdown-toc GitLab -->
#+end_html

- [[#exercises-scope][Exercises: Scope]]
  - [[#01][01]]
  - [[#02][02]]
  - [[#03][03]]
  - [[#04][04]]
- [[#exercises-syntax-errors][Exercises: Syntax Errors]]
  - [[#01-1][01]]
  - [[#02-1][02]]
  - [[#03-1][03]]
- [[#chapter-exercises][Chapter Exercises]]
  - [[#reading-syntax][Reading syntax]]
    - [[#01-2][01]]
    - [[#02-2][02]]
  - [[#building-functions][Building functions]]
    - [[#01-3][01]]
    - [[#02-3][02]]
    - [[#03-2][03]]
    - [[#04-1][04]]
    - [[#05][05]]
    - [[#06][06]]

#+begin_html
  <!-- vim-markdown-toc -->
#+end_html

** Exercises: Scope
:PROPERTIES:
:CUSTOM_ID: exercises-scope
:END:
Page 74.

*** 01
:PROPERTIES:
:CUSTOM_ID: section
:END:
Yes, =y= is in scope for =z=.

*** 02
:PROPERTIES:
:CUSTOM_ID: section-1
:END:
No, =h= is not in scope for =g=.

*** 03
:PROPERTIES:
:CUSTOM_ID: section-2
:END:
No, =d= is not in scope.

Note that =pi= is in scope from Prelude.

*** 04
:PROPERTIES:
:CUSTOM_ID: section-3
:END:
Yep, all fine and dandy.

** Exercises: Syntax Errors
:PROPERTIES:
:CUSTOM_ID: exercises-syntax-errors
:END:
Page 78.

*** 01
:PROPERTIES:
:CUSTOM_ID: section-4
:END:
Need to either place =++= in infix position or use parentheses around it
in prefix position:

#+begin_src ghci
λ> [1, 2, 3] ++ [4, 5, 6]
[1,2,3,4,5,6]
λ> (++) [1, 2, 3] [4, 5, 6]
[1,2,3,4,5,6]
#+end_src

*** 02
:PROPERTIES:
:CUSTOM_ID: section-5
:END:
Single quotes are for =Char=. Replace the single quotes with double
quotes or enclose each single quoted character inside a list separated
by commas, like =['a', 'b', 'c']=, etc.

*** 03
:PROPERTIES:
:CUSTOM_ID: section-6
:END:
This one is fine.

** Chapter Exercises
:PROPERTIES:
:CUSTOM_ID: chapter-exercises
:END:
Page 82.

*** Reading syntax
:PROPERTIES:
:CUSTOM_ID: reading-syntax
:END:
**** 01
:PROPERTIES:
:CUSTOM_ID: section-7
:END:
A is OK.

B needs to be =(++)= instead of =++= because it is in prefix position.

C is OK.

D is missing the closing double quote.

E should be ="hello" !! 4=.

F is OK.

G should take the 4 out of the string, as the first argument to =take=.

H is OK.

**** 02
:PROPERTIES:
:CUSTOM_ID: section-8
:END:
- A matches D.
- B matches C.
- C matches E.
- D matches A.
- E matches B.

*** Building functions
:PROPERTIES:
:CUSTOM_ID: building-functions
:END:
**** 01
:PROPERTIES:
:CUSTOM_ID: section-9
:END:
Page 83.

- A: ="Curry is awesome" ++ "!"=
- B: ="Curry is awesome!" !! 4=
- C: =drop 9 "Curry is awesome!"=

**** 02
:PROPERTIES:
:CUSTOM_ID: section-10
:END:
B:

#+begin_src haskell
myAppend :: [Char] -> [Char]
myAppend s = (++) "Cury is awesome" s
--
-- λ> myAppend "!"
-- "Cury is awesome!
--
#+end_src

B:

#+begin_src haskell
getCharAtIndex :: Int -> Char
getCharAtIndex idx = (!!) "Curry is awesome!" idx
--
-- λ> getCharAtIndex 4
-- 'y'
--
#+end_src

NOTE: Since =(!!)= takes an =Int=, and our function uses =(!!)=, our
index parameter must also be an =Int=.

C:

#+begin_src haskell
strAfterIndex :: Int -> [Char]
strAfterIndex idx = drop idx "Curry is awesome!"
--
-- λ> strAfterIndex 9
-- "awesome!"
--
#+end_src

**** 03
:PROPERTIES:
:CUSTOM_ID: section-11
:END:
Page 84.

#+begin_src haskell
thirdLetter :: String -> Char
thirdLetter s = (!!) s 2
--
-- λ> thirdLetter "Tomb Raider - The Last Revelation"
-- 'm'
--
#+end_src

**** 04
:PROPERTIES:
:CUSTOM_ID: section-12
:END:
Page 85.

#+begin_src haskell
letterIndex :: Int -> Char
letterIndex idx = (!!) "Currying is awesome!" idx
--
-- λ> letterIndex 7
-- 'g'
--
#+end_src

**** 05
:PROPERTIES:
:CUSTOM_ID: section-13
:END:
Page 85.

#+begin_src haskell
revStr :: String -> String
revStr str =
  let
    ini :: String
    ini = take 8 str
    mid :: String
    mid = take 2 $ drop 9 str
    end :: String
    end = drop 12 str
  in
    end ++ " " ++ mid ++ " " ++ ini
--
-- λ> revStr "Currying is awesome"
-- "awesome is Currying"
--
#+end_src

**** 06
:PROPERTIES:
:CUSTOM_ID: section-14
:END:
Page 85.

#+begin_src haskell
module Reverse where

revStr :: String -> String
revStr str =
  let
    ini :: String
    ini = take 8 str
    mid :: String
    mid = take 2 $ drop 9 str
    end :: String
    end = drop 12 str
  in
    end ++ " " ++ mid ++ " " ++ ini

main :: IO ()
main = print $ revStr "Currying is awesome"
--
-- λ> main
-- "awesome is Currying"
--
#+end_src
